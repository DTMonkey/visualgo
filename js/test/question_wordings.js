const BST_SEARCH = "Given the BST as shown in the picture, click the sequence of vertices (the order matters) that are visited by Search(|value|)!";
const BST_TRAVERSAL = "Given the BST as shown in the picture, click the sequence of vertices (the order matters) that are visited by |subtype| traversal!";
const BST_SUCCESSOR = "Given the BST as shown in the picture, click the sequence of vertices (the order matters) that are visited by Successor(|value|)!";
const BST_PREDECESSOR = "Given the BST as shown in the picture, click the sequence of vertices (the order matters) that are visited by Predecessor(|value|)!";
const BST_MIN = "What is the value of the minimum element in this BST?";
const BST_MAX = "What is the value of the maximum element in this BST?";
const BST_K_SMALLEST_VALUE = "What is the value of the element with rank |value| in this BST?";
const BST_DELETION = "Given the normal BST (not AVL) as shown in the picture, delete at most |maxAmt| vertex/vertices such that the height of the BST decreases by 1!";
const BST_SWAP = "Is the graph in the picture a valid BST?";
const BST_IS_AVL = "Is the graph in the picture a valid AVL?";
const BST_HEIGHT = "What is the height of this BST?";
const BST_ROOT = "Click the root of this BST!";
const BST_LEAVES = "Click all the leaf vertices of this BST!";
const BST_INTERNAL = "Click all the internal vertices of this BST!";
const BST_AVL_ROTATION_INSERT = "Given the AVL as shown in the picture, insert at least |limitBtm| vertex/vertices and at most |limitTop| vertex/vertices such that |rotationAmt| rotation(s) occur(s)!";
const BST_AVL_ROTATION_DELETE = "Given the AVL as shown in the picture, delete at least |limitBtm| vertex/vertices and at most |limitTop| vertex/vertices such that |rotationAmt| rotation(s) occur(s)!";
const BST_AVL_HEIGHT = "";

const HEAP_INSERTION = "An integer |value| is going to be inserted into the binary |subtype| heap as shown in the picture, click the sequence of vertices (the order matters) that will swap their content with vertex |value| during this insertion!";
const HEAP_EXTRACT = "We are performing extract operation to the binary |subtype| heap as shown in the picture, click the sequence of vertices (the order matters) that will swap their content with the leaf vertex that replaces the root node!";
const HEAP_HEAP_SORT = "We perform |amt| extract operations to the binary |subtype| heap as shown in the picture, click all vertices (in any order) that will remain in the binary |subtype| heap after all these operations are executed!";
const HEAP_HEAPIFY = "We perform Build Heap O(n) to the binary |subtype| heap as shown in the picture, click all vertices (in any order) that violates the property of a |subtype| heap and will be shifted down!";
const HEAP_ROOT = "Click the root of this Heap!";
const HEAP_LEAVES = "Click all the leaf vertices of this Heap!";
const HEAP_INTERNAL = "Click all the internal vertices of this Heap!";

const BITMASK_OPERATIONS = "What is the integer result of |value| |subtype| (1 << |shiftAmt|)?";
const BITMASK_CONVERT = "What is the |toBase| representation of |fromBase| value |value|?";
const BITMASK_NUMBER_ON = "How many bit(s) in the binary representation of |value| is/are 1?";
const BITMASK_LSONE = "What is the index of the least significant bit (first bit counted from the right, 0-based indexing) that is 1 in the binary representation of |value|?";